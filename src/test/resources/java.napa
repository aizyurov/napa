# Based on:
# The Java Â® Language Specification
# Java SE 8 Edition
# https://docs.oracle.com/javase/specs/jls/se8/jls8.pdf

# 3.6 White space

! "[ \t\f\n\r]+" ;

# 3.7 Comments

! "/\*([^*]|\*[^/])*\*/" ;

! "//[^\n\r]*([\r\n]|\r\n)" ;

# 3.8 Identifiers

# TODO Full unicode support

Identifier = "[a-zA-Z_$][a-zA-Z_$0-9]*" ;


# 3.10 Literals

Literal =
|  IntegerLiteral
|  FloatingPointLiteral
|  BooleanLiteral
|  CharacterLiteral
|  StringLiteral
|  NullLiteral ;

# 3.10.1 Integer Literals

IntegerLiteral =
  DecimalIntegerLiteral
| HexIntegerLiteral
| OctalIntegerLiteral
| BinaryIntegerLiteral ;

DecimalIntegerLiteral = "0[lL]?" | "[1-9]([_0-9]*[0-9])*[lL]?" ;

HexIntegerLiteral = "0[xX][0-9a-fA-F]([_0-9a-fA-F]*[0-9a-fA-F])*[lL]?" ;

OctalIntegerLiteral = "0[0-7]([_0-7]*[0-7])*[lL]?"  ;

BinaryIntegerLiteral = "0[bB][0-1]([_0-1]*[0-1])*[lL]?" ;

# 3.10.2 Floating-Point Literals

FloatingPointLiteral =
  DecimalFloatingPointLiteral
| HexadecimalFloatingPointLiteral ;

DecimalFloatingPointLiteral =
  "[0-9]([_0-9]*[0-9])*[.]([0-9]([_0-9]*[0-9])*)?([eE]?[+\-]?[0-9]([_0-9]*[0-9])*)?[fFdD]?"
| "[.][0-9]([_0-9]*[0-9])*([eE][+\-]?[0-9]([_0-9]*[0-9])*)?[fFdD]?"
| "[0-9]([_0-9]*[0-9])*([eE][+\-]?[0-9]([_0-9]*[0-9])*)[fFdD]?"
| "[0-9]([_0-9]*[0-9])*[fFdD]" ;

HexadecimalFloatingPointLiteral =
  "0[xX][0-9a-fA-F]([_0-9a-fA-F]*[0-9a-fA-F])*[.]?[pP][+\-]?[0-9]([_0-9]*[0-9])*[fFdD]?"
| "0[xX][0-9a-fA-F]([_0-9a-fA-F]*[0-9a-fA-F])*[.][0-9a-fA-F]([_0-9a-fA-F]*[0-9a-fA-F])*[pP][+\-]?[0-9]([_0-9]*[0-9])*[fFdD]?" ;

# 3.10.3 Boolean Literals

BooleanLiteral = 'true' | 'false' ;

# 3.10.4 Character Literals

CharacterLiteral = "'[^\n\r\f\\\']'"
| "'\\([nrtbf\"'\\]|[0-7]|[0-7][0-7]|[0-3][0-7][0-7])'" ;

# 3.10.5 String Literals

StringLiteral = "\"([^\n\r\f\\\"]|\\([nrtbf\"'\\]|[0-7]|[0-7][0-7]|[0-3][0-7][0-7]))*\"" ;

# 3.10.7 The Null Literal

NullLiteral = 'null' ;

# 4.1 The Kinds of Types and Values

Type =
  PrimitiveType
| ReferenceType ;

# 4.2 Primitive Types and Values

PrimitiveType =
  { Annotation } NumericType
| { Annotation } 'boolean' ;

NumericType =
  IntegralType
| FloatingPointType ;

IntegralType = 'byte' | 'short' | 'int' | 'long' | 'char' ;

FloatingPointType = 'float' | 'double' ;

# 4.3 Reference Types and Values

# changes: TypeVariable excluded; cannot distinguish from ClassOrInterfaceType
# ClassType and InterfaceType excluded

ReferenceType =
  ClassOrInterfaceType
| ArrayType ;

ClassType = ClassOrInterfaceType ;

InterfaceType = ClassOrInterfaceType;

TypeVariable = ClassOrInterfaceType ;

ClassOrInterfaceType =
    AnnotatedIdentifierWithTypeArguments { '.'  AnnotatedIdentifierWithTypeArguments } ;

AnnotatedIdentifierWithTypeArguments = { Annotation } Identifier [TypeArguments] ;

ArrayType =
  PrimitiveType Dims
| ClassOrInterfaceType Dims ;

Dims =
  Dim {Dim} ;

Dim =  {Annotation} '[' ']';

# 4.4 Type Variables

TypeParameter = {TypeParameterModifier} Identifier [TypeBound] ;

TypeParameterModifier = Annotation ;

TypeBound = 'extends' ClassOrInterfaceType {AdditionalBound} ;

AdditionalBound= '&' InterfaceType ;

# 4.5.1 Type Arguments of Parameterized Types

TypeArguments = '<' TypeArgumentList '>' ;

TypeArgumentList = TypeArgument { ',' TypeArgument } ;

TypeArgument =
  ReferenceType
| Wildcard ;

Wildcard = {Annotation} '?'  [WildcardBounds] ;

WildcardBounds =
  'extends' ReferenceType
| 'super' ReferenceType ;

# 6.5. Determining the Meaning of a Name

PackageName = Identifier {'.' Identifier} ;

PackageOrTypeName = Identifier {'.' Identifier} ;

TypeName = Identifier {'.' Identifier} ;

ExpressionName = Identifier {'.' Identifier} ;

MethodName = Identifier ;

# 7.3 Compilation Units

CompilationUnit = [PackageDeclaration] {ImportDeclaration} {TypeDeclaration} ;

# 7.4.1 Named Packages

PackageDeclaration = {PackageModifier} 'package' Identifier {'.' Identifier} ';' ;

PackageModifier = Annotation ;

# 7.5 Import  Declarations

ImportDeclaration =
    SingleTypeImportDeclaration
|   TypeImportOnDemandDeclaration
|   SingleStaticImportDeclaration
|   StaticImportOnDemandDeclaration ;

# 7.5.1. Single-Type-Import Declarations

SingleTypeImportDeclaration = 'import' TypeName ';' ;

# 7.5.2. Type-Import-on-Demand Declarations

TypeImportOnDemandDeclaration = 'import' PackageOrTypeName '.' '*' ';' ;

# 7.5.3. Single-Static-Import Declarations

SingleStaticImportDeclaration = 'import' 'static' TypeName '.' Identifier ';' ;

# 7.5.4. Static-Import-on-Demand Declarations

StaticImportOnDemandDeclaration = 'import' 'static' TypeName '.' '*' ';' ;



# 7.6. Top Level Type Declarations

TypeDeclaration =
  ClassDeclaration
| InterfaceDeclaration
| ';' ;

# 8.1 Class Declarations

ClassDeclaration =
  NormalClassDeclaration
| EnumDeclaration ;

NormalClassDeclaration = {ClassModifier} 'class' Identifier [TypeParameters] [Superclass] [Superinterfaces] ClassBody ;

# 8.1.1 Class Modifiers

ClassModifier = Annotation | 'public' | 'protected' | 'private' | 'abstract' | 'static' | 'final' | 'strictfp' ;

# 8.1.2 Generic Classes and Type Parameters

TypeParameters = '<' TypeParameterList '>' ;

TypeParameterList = TypeParameter {',' TypeParameter} ;

# 8.1.4 Superclasses and Subclasses

Superclass = 'extends' ClassType ;

# 8.1.5 Superinterfaces

Superinterfaces = 'implements' InterfaceTypeList ;

InterfaceTypeList = InterfaceType {',' InterfaceType} ;

# 8.1.6 Class Body and Member Declarations

ClassBody = '{' {ClassBodyDeclaration} '}' ;

ClassBodyDeclaration =
    ClassMemberDeclaration
|   InstanceInitializer
|   StaticInitializer
|   ConstructorDeclaration ;

ClassMemberDeclaration =
    FieldDeclaration
|   MethodDeclaration
|   ClassDeclaration
|   InterfaceDeclaration
|   ';' ;

# 8.3 Field Declarations
# TODO
# Temporary placeholder

FieldDeclaration = {FieldModifier} UnannType VariableDeclaratorList ';' ;

VariableDeclaratorList = VariableDeclarator {',' VariableDeclarator} ;

VariableDeclarator = VariableDeclaratorId ['=' VariableInitializer] ;

VariableDeclaratorId = Identifier [Dims] ;

VariableInitializer =
  Expression
| ArrayInitializer ;

UnannType =
  UnannPrimitiveType
| UnannReferenceType ;

UnannPrimitiveType =
  NumericType
| 'boolean' ;

UnannReferenceType =
  UnannClassOrInterfaceType
| UnannArrayType ;

UnannClassOrInterfaceType = Identifier [TypeArguments] { '.' AnnotatedIdentifierWithTypeArguments} ;

UnannArrayType =
  UnannPrimitiveType Dims
| UnannClassOrInterfaceType Dims ;


# 8.3.1. Field Modifiers

FieldModifier =
  Annotation | 'public' | 'protected' | 'private'
| 'static' | 'final' | 'transient' | 'volatile' ;

# 8.4 Method Declarations

MethodDeclaration =  {MethodModifier} MethodHeader MethodBody ;

MethodHeader =
  Result MethodDeclarator [Throws]
| TypeParameters {Annotation} Result MethodDeclarator [Throws] ;

MethodDeclarator = Identifier '(' [FormalParameterList] ')' [Dims] ;

# 8.4.1. Formal Parameters

FormalParameterList =
  ReceiverParameter {',' FormalParameter} ['.' LastFormalParameter]
| FormalParameter {',' FormalParameter} ['.' LastFormalParameter]
| LastFormalParameter ;

FormalParameter = {VariableModifier} UnannType VariableDeclaratorId ;

VariableModifier = Annotation | 'final' ;

ReceiverParameter = {Annotation} UnannType [Identifier '.'] 'this' ;

LastFormalParameter = {VariableModifier} UnannType {Annotation} '...' VariableDeclaratorId ;

# 8.4.3. Method Modifiers

MethodModifier =
  Annotation | 'public' | 'protected' | 'private'
| 'abstract' | 'static' | 'final' | 'synchronized' | 'native' | 'strictfp' ;

# 8.4.5. Method Result

Result =
  UnannType
| 'void' ;

# 8.4.6. Method Throws

Throws = 'throws' ExceptionTypeList ;

ExceptionTypeList = ExceptionType {',' ExceptionType} ;

ExceptionType = ClassOrInterfaceType ;

# 8.4.7. Method Body

MethodBody =
  Block
| ';' ;

# 8.6 Instance Initializers

InstanceInitializer = Block ;

# 8.7 Static Initializers

StaticInitializer = 'static' Block ;

# 8.8 Constructor Declarations

ConstructorDeclaration = {ConstructorModifier} ConstructorDeclarator [Throws] ConstructorBody ;

ConstructorDeclarator = [TypeParameters] SimpleTypeName '(' [FormalParameterList] ')' ;

SimpleTypeName = Identifier ;

# 8.8.3. Constructor Modifier

ConstructorModifier = Annotation | 'public' | 'protected' | 'private' ;

# 8.8.7. Constructor Body

ConstructorBody = '{' [ExplicitConstructorInvocation] [BlockStatements] '}' ;

# 8.8.7.1. Explicit Constructor Invocations

ExplicitConstructorInvocation =
  [TypeArguments] 'this' '(' [ArgumentList] ')' ';'
| [TypeArguments] 'super' '(' [ArgumentList] ')' ';'
| ExpressionName '.' [TypeArguments] 'super' '(' [ArgumentList] ')' ';'
| Primary '.' [TypeArguments] 'super' '(' [ArgumentList] ')' ';' ;

# 8.9 Enum Types
# TODO
# Temporary placeholder

EnumDeclaration = '#EnumDeclaration#' ;

# 9.1 Interface Declarations

InterfaceDeclaration = '#InterfaceDeclaration#' ;

# 9.7 Annotations
# TODO
# Temporary placeholder

Annotation = '#Annotation#' ;

# 10.6. Array Initializers
# TODO
# Temporary placeholder

ArrayInitializer = '#ArrayInitializer#' ;

# 14.2  Blocks

Block = '{' [BlockStatements] '}' ;

BlockStatements = BlockStatement {BlockStatement} ;

# TODO
# Temporary placeholder

BlockStatement = '#BlockStatement#' ;

# 15.2. Forms of Expressions
# TODO
# Temporary placeholder

Expression = '#Expression#' ;

# 15.8. Primary Expressions
# TODO
# Temporary placeholder

Primary = '#Primary#' ;


# 15.12. Method Invocation Expressions
# TODO MethodInvocation

ArgumentList = Expression {',' Expression} ;





