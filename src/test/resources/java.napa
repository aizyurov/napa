# 3.6 White space

! "[ \t\f\n\r]+" ;



# 3.10 Literals

Literal =
|  IntegerLiteral
|  FloatingPointLiteral
|  BooleanLiteral
|  CharacterLiteral
|  StringLiteral
|  NullLiteral ;

# 3.10.1 Integer Literals

IntegerLiteral =
  DecimalIntegerLiteral
| HexIntegerLiteral
| OctalIntegerLiteral
| BinaryIntegerLiteral ;

DecimalIntegerLiteral = "0[lL]?" | "[1-9]([_0-9]*[0-9])*[lL]?" ;

HexIntegerLiteral = "0[xX][0-9a-fA-F]([_0-9a-fA-F]*[0-9a-fA-F])*[lL]?" ;

OctalIntegerLiteral = "0[0-7]([_0-7]*[0-7])*[lL]?"  ;

BinaryIntegerLiteral = "0[bB][0-1]([_0-1]*[0-1])*[lL]?" ;

# 3.10.2 Floating-Point Literals

FloatingPointLiteral =
  DecimalFloatingPointLiteral
| HexadecimalFloatingPointLiteral ;

DecimalFloatingPointLiteral =
  "[0-9]([_0-9]*[0-9])*[.]([0-9]([_0-9]*[0-9])*)?([eE]?[+\-]?[0-9]([_0-9]*[0-9])*)?[fFdD]?"
| "[.][0-9]([_0-9]*[0-9])*([eE][+\-]?[0-9]([_0-9]*[0-9])*)?[fFdD]?"
| "[0-9]([_0-9]*[0-9])*([eE][+\-]?[0-9]([_0-9]*[0-9])*)[fFdD]?"
| "[0-9]([_0-9]*[0-9])*[fFdD]" ;

HexadecimalFloatingPointLiteral =
  "0[xX][0-9a-fA-F]([_0-9a-fA-F]*[0-9a-fA-F])*[.]?[pP][+\-]?[0-9]([_0-9]*[0-9])*[fFdD]?"
| "0[xX][0-9a-fA-F]([_0-9a-fA-F]*[0-9a-fA-F])*[.][0-9a-fA-F]([_0-9a-fA-F]*[0-9a-fA-F])*[pP][+\-]?[0-9]([_0-9]*[0-9])*[fFdD]?" ;

# 3.10.3 Boolean Literals

BooleanLiteral = 'true' | 'false' ;

# 3.10.4 Character Literals

CharacterLiteral = "'[^\n\r\f\\\']'"
| "'\\([nrtbf\"'\\]|[0-7]|[0-7][0-7]|[0-3][0-7][0-7])'" ;

# 3.10.5 String Literals

StringLiteral = "\"([^\n\r\f\\\"]|\\([nrtbf\"'\\]|[0-7]|[0-7][0-7]|[0-3][0-7][0-7]))*\"" ;

# 3.10.7 The Null Literal

NullLiteral = 'null' ;